/*
Copyright (C) BABEC. All rights reserved.
Copyright (C) THL A29 Limited, a Tencent company. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option java_package = "org.chainmaker.pb.consensus";
option go_package = "chainmaker.org/chainmaker/pb-go/v2/consensus";
package consensus;

import "common/block.proto";
import "common/rwset.proto";

enum ConsensusType {
  SOLO = 0;
  TBFT = 1;
  MBFT = 2;
  MAXBFT = 3;
  RAFT = 4;
  DPOS = 5;
  POW = 10;
}

message VerifyResult {
  common.Block  verified_block = 1;

  enum Code {
    SUCCESS = 0;
    FAIL    = 1;
  }
  Code code  = 2;
  string msg = 3;
  map<string, common.TxRWSet> txs_rw_set = 4;
  RwSetVerifyFailTxs rw_set_verify_fail_txs = 5;
}

message RwSetVerifyFailTxs{
  uint64  block_height = 1;
  repeated string tx_ids  = 2;
}

message ProposalBlock{
  common.Block  block = 1;
  map<string, common.TxRWSet> txs_rw_set = 2;
  common.Block  cut_block = 3;
}

message BlockHeaderConsensusArgs {
  int64 consensus_type = 1;
  // status of the round in tbft
  uint64 round = 2;
  // status of the view in maxbft
  uint64 view = 3;
  common.TxRWSet consensus_data = 4;
}

message GovernanceMember{
  string node_id = 1;
  int64 index =2;
}

message GovernanceContract {
  uint64  epoch_id = 1;    //epoch idï¼Œincrease by epoch switch
  ConsensusType type =2;  //consensus type
  int64 cur_max_index =3;   //current index to be assigned
  bool skip_timeout_commit = 4;
  //bool is_config_chg = 4;   //is the configuration changed
  //bool is_validator_chg = 5;    //is the validator changed
  uint64 config_sequence  =6;    //config sequence, check whether the configuration is changed
  uint64 n = 7;    //number of nodes participating in the consensus
  uint64 min_quorum_for_qc = 8;   //the minimum number of consensus nodes that need to survive
  uint64 cached_len = 9;
  uint64 next_switch_height = 10;   //the next height of switching validator
  uint64 transit_block = 11;    //the buffer height of switching validator
  uint64 block_num_per_epoch = 12;    //cycle of switching validator
  uint64 validator_num = 13;    //maximum number of participating validators
  uint64 node_propose_round = 14; //the rounds in which each validator can produce blocks continuously
  repeated GovernanceMember members = 15; //currently maintained nodes
  repeated GovernanceMember validators = 16;  //currently participate validators
  repeated GovernanceMember next_validators = 17;  //next participate validators
  uint64 last_min_quorum_for_qc = 18;   //the last epoch minimum number of consensus nodes that need to survive
  uint64 maxbft_round_timeout_mill = 19; //The base timeout for viewChange
  uint64 maxbft_round_timeout_interval_mill = 20; //The delta timeout for the viewChange
  repeated GovernanceMember last_validators = 21;  //last epoch participate validators
}

// rpc get consensus status by the request
message GetConsensusStatusRequest {
  // blockchain identifier
  string chain_id = 1;
}

message Validators {
  repeated string nodes = 1;
}