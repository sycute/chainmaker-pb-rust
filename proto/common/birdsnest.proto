/*
Copyright (C) BABEC. All rights reserved.
Copyright (C) THL A29 Limited, a Tencent company. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "chainmaker.org/chainmaker/pb-go/v2/common";

package common;

enum KeyType {
  KTDefault = 0;
  KTTimestampKey = 1;
}

enum FilterExtensionType {
  FETDefault = 0;
  FETTimestamp = 1;
}

enum RuleType {
  AbsoluteExpireTime = 0;
}

enum SerializeIntervalType {
  // Timed serialize type
  Height = 0;
  // Timed serialize type
  Timed = 1;
  // Exit serialize type
  Exit = 2;
}

// Bird's Nest
message BirdsNest {
  // Bird's Nest config
  BirdsNestConfig config = 1;
  // The final height
  uint64 height = 2;
  // current index
  uint32 currentIndex = 3;
  // A group of cuckoos filter
  repeated CuckooFilter filters = 4;
}

// Sharding Bird's Nest
message ShardingBirdsNest {
  uint32 length = 1;
  // The final height
  uint64 height = 2;
  // Bird's Nest config
  ShardingBirdsNestConfig config = 3;
}

// Chain table structure
message CuckooFilter {
  // The field "cuckoo" is used to hold the serialized data of the cuckoo
  // Pb limit: The size of bytes cannot be larger than 4 GB
  bytes cuckoo = 1;
  // Carries the ID of the time
  bytes extension = 2;
  // cuckoo configuration
  bytes config = 3;
}

// Sharding bird's Nest configuration
message ShardingBirdsNestConfig {
  string chain_id = 1;
  uint32 length = 2;
  // sharding task timeout
  int64 timeout = 3;
  // Bird's Nest configuration
  BirdsNestConfig birdsnest = 4;
  // Snapshot config
  SnapshotSerializerConfig snapshot = 5;
}

message BirdsNestConfig {
  string chain_id = 1;
  uint32 length = 2;
  // rules config
  RulesConfig rules = 3;
  // Cuckoo config
  CuckooConfig cuckoo = 4;
  // Snapshot config
  SnapshotSerializerConfig snapshot = 5;
}

message RulesConfig {
  // absolute expire time second
  int64 absolute_expire_time = 1;
}
// Cuckoo config
message CuckooConfig {
  KeyType key_type = 1;
  // num of tags for each bucket, which is b in paper. tag is fingerprint, which is f in paper.
  uint32 tags_per_bucket = 2;
  // num of bits for each item, which is length of tag(fingerprint)
  uint32 bits_per_item = 3;
  // num of keys that filter will store. this value should close to and lower
  //					 nextPow2(maxNumKeys/tagsPerBucket) * maxLoadFactor. cause table.NumBuckets is always a power of two
  uint32 max_num_keys = 4;
  // has two constant parameters to choose from:
  // TableTypeSingle normal single table
  // TableTypePacked packed table, use semi-sort to save 1 bit per item
  uint32 table_type = 5;
}

// Snapshot serializer config
message SnapshotSerializerConfig {
  // serialization type
  SerializeIntervalType type = 1;
  TimedSerializeIntervalConfig timed = 2;
  BlockHeightSerializeIntervalConfig block_height = 3;
  // filepath
  string path = 4;
}

// Timed serialization interval
message TimedSerializeIntervalConfig {
  int64 interval = 1;
}

// Block height serialization interval
message BlockHeightSerializeIntervalConfig {
  uint64 interval = 1;
}
